/*
 * omu-rest
 *
 * Laravel製RESTful APIサーバー。著者: [connect0459](https://github.com/connect0459)
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// BooksAPIController binds http requests to an api service and writes the service results to the http response
type BooksAPIController struct {
	service BooksAPIServicer
	errorHandler ErrorHandler
}

// BooksAPIOption for how the controller is set up.
type BooksAPIOption func(*BooksAPIController)

// WithBooksAPIErrorHandler inject ErrorHandler into controller
func WithBooksAPIErrorHandler(h ErrorHandler) BooksAPIOption {
	return func(c *BooksAPIController) {
		c.errorHandler = h
	}
}

// NewBooksAPIController creates a default api controller
func NewBooksAPIController(s BooksAPIServicer, opts ...BooksAPIOption) Router {
	controller := &BooksAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the BooksAPIController
func (c *BooksAPIController) Routes() Routes {
	return Routes{
		"Call14d04cd3a807843d383b87ccfca3da7b": Route{
			strings.ToUpper("Get"),
			"/api/books/query/{type_branch_id}",
			c.Call14d04cd3a807843d383b87ccfca3da7b,
		},
		"Call24c56c274fc27bd118b5dfc62fbf0c3e": Route{
			strings.ToUpper("Get"),
			"/api/books/column/{type_branch_id}",
			c.Call24c56c274fc27bd118b5dfc62fbf0c3e,
		},
	}
}

// Call14d04cd3a807843d383b87ccfca3da7b - 書籍の検索と支部在庫の表示
func (c *BooksAPIController) Call14d04cd3a807843d383b87ccfca3da7b(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	typeBranchIdParam, err := parseNumericParameter[int32](
		params["type_branch_id"],
		WithRequire[int32](parseInt32),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	qParam := query.Get("q")
	fParam, err := parseNumericParameter[int32](
		query.Get("f"),
		WithParse[int32](parseInt32),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	tParam, err := parseNumericParameter[int32](
		query.Get("t"),
		WithParse[int32](parseInt32),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	result, err := c.service.Call14d04cd3a807843d383b87ccfca3da7b(r.Context(), typeBranchIdParam, qParam, fParam, tParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// Call24c56c274fc27bd118b5dfc62fbf0c3e - 書籍の検索と支部在庫の表示
func (c *BooksAPIController) Call24c56c274fc27bd118b5dfc62fbf0c3e(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	typeBranchIdParam, err := parseNumericParameter[int32](
		params["type_branch_id"],
		WithRequire[int32](parseInt32),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	idParam := query.Get("id")
	titleParam := query.Get("title")
	authorParam := query.Get("author")
	publisherParam := query.Get("publisher")
	genreParam := query.Get("genre")
	descriptionParam := query.Get("description")
	result, err := c.service.Call24c56c274fc27bd118b5dfc62fbf0c3e(r.Context(), typeBranchIdParam, idParam, titleParam, authorParam, publisherParam, genreParam, descriptionParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
